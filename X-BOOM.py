# Telegram: @rafi_broh


import base64
from Crypto.Cipher import AES


def decrypt_data(data, key):
    nonce, tag, ciphertext = data[:16], data[16:32], data[32:]
    cipher = AES.new(key, AES.MODE_EAX, nonce=nonce)
    return cipher.decrypt_and_verify(ciphertext, tag)


encrypted_data = base64.b64decode("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")


aes_key = b'y\xa3\x046$\xa3 \xc6=\xfeAO\xc3\x00\xa5\xf2'


exec(decrypt_data(encrypted_data, aes_key))
