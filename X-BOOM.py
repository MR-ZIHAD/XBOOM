# Telegram: @rafi_broh


import base64
from Crypto.Cipher import AES


def decrypt_data(data, key):
    nonce, tag, ciphertext = data[:16], data[16:32], data[32:]
    cipher = AES.new(key, AES.MODE_EAX, nonce=nonce)
    return cipher.decrypt_and_verify(ciphertext, tag)


encrypted_data = base64.b64decode("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")


aes_key = b'a1i\xbb\x95\x1b\x93S\xe0\xbb\xe6$\xe2\x95m\xf0'


exec(decrypt_data(encrypted_data, aes_key))
