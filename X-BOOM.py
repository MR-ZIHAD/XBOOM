# Telegram: @rafi_broh


import base64
from Crypto.Cipher import AES


def decrypt_data(data, key):
    nonce, tag, ciphertext = data[:16], data[16:32], data[32:]
    cipher = AES.new(key, AES.MODE_EAX, nonce=nonce)
    return cipher.decrypt_and_verify(ciphertext, tag)


encrypted_data = base64.b64decode("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")


aes_key = b'07\x06\x85\xec%\xd5\x19Xb(\x1f\x0c\xfd2\x18'


exec(decrypt_data(encrypted_data, aes_key))
